project_detail표에 추가할 항목
	state			INT
	sub_state		INT
	except_type		INT
	except_reason		VARCHAR(50)
	issue_id		VARCHAR(20)
	issue_type		INT
	issue_date		DATE
	first_check_score	INT
	imp_check_score		INT
	first_check_data	MEDIUMTEXT
	imp_check_data		MEDIUMTEXT
	first_check_admin_temp_data	MEDIUMTEXT
	first_check_consignee_temp_data	MEDIUMTEXT
	imp_check_admin_temp_data	MEDIUMTEXT
	imp_check_consignee_temp_data	MEDIUMTEXT
	turn			INT

	

state:		1	최초점검
		2	이행점검
		3	점검제외

sub_state:	1	대기
		2	검수중
		3	검수완료

례: 	state:1이고 sub_state:1이면 최초점검에서 자가점검제출대기중...
	state:3이면 최초점검과 이행점검에서 모두 점검제외항목에 계산이 들어감

except_type:	점검제외리유
		0	점검제외가 아님
		1	PG사
		2	인증서 제출
		3	계약 종료
		4	점검 거부
		5	직접 입력

except_reason:	except_type이 5인 경우 사용자가 입력한 제외이유

issue_id:	이슈가 발생하는 경우 수자와 영문자로 5글자정도 란수발생하여 설정
		issue_id가 존재하는 경우 state:1이면 최초점검에 state:2이면 이행점검에서 이슈사항수탁사에 넣어야 함
		이 값은 메모 발신이력에서 대화창아이디로 쓰임

issue_type:	0	이슈없음
		1	계약종료 확인필요
		2	담당자 연락불가
		3	점검거부
		4	기타

issue_date:	이슈사항에 등록된 날자

first_check_score:	최초점검점수
imp_check_score:	이행점검점수
first_check_miss_count:		최초점검미흡건수-관리자가 점검결과창(slide28)에서 검수완료를 누르면 미흡건수계산해서 갱신
imp_check_miss_count:		이행점검미흡건수-우와 같음 

first_check_data, imp_check_data:	점검결과를 JSON형식으로 보관

보관형식:
프로젝트에 따르는 체크리스트의 항목들의 정보가 check_list_info에 보관되여있고 행들의 id가 다음과 같이 되여있다고 하자.
2,3,4,5

그러면 점검결과를 아래와 같은 형식으로 보관한다.
[{
    "id": 19,
    "self_check_result": "Y",
    "attachment": "Y",
    "attachment_name": "asdasd.txt",
    "check_result": "N",
    "additional": "Y",
    "modify_time": "2024-04-07 23:41:12",
    "result": "Y",
    "lock": "X", 
}, {
    "id": 20,
    "self_check_result": "Y",
    "attachment": "N",
    "attachment_name": "",
    "check_result": "Y",
    "additional": "N",
    "modify_time": "2024-04-07 23:42:12",
    "result": "Y",
    "lock": "O", 
},{
    "id": 21,
    "self_check_result": "Y",
    "attachment": "Y",
    "attachment_name": "1.txt",
    "check_result": "N",
    "additional": "Y",
    "modify_time": "2024-04-07 23:43:12",
    "result": "Y",
    "lock": "O", 
},]

id:			check_list_info에서 행의 아이디
self_check_result:	자가점검결과(수탁사)
attachment:		증적 첨부
attachment_file:	attachment가 'Y'인 경우 파일 이름
check_result:		검수결과(관리자)
additional:		보완조치
modify_time:		최근 수정 날자
result:			최종 결과
lock:			Lock
...:			slide30-1 세부점검항목


우와 같은 방법으로 점검 결과를 보관하여 관리자와 수탁사가 각기 자기에게 필요한 부분을 수정하면서 점검을 진행할수 있다.
리력을 보관하기 위해 초기 점검과 이행 점검 자료를 따로 가지고있는다.
이것을 구현하기 위해서 가장 중요한것은 체크리스트항목정보가 변하지 말하야 한다는것이다.
보관할때 check_list_info의 id를 가지고 세부항목정보를 얻기 때문에 check_list_info가 변경되면 이후에 결과를 얻어볼수 없게 된다.
그러므로 고객사와 이 문제와 관련하여 토론해보아야 한다. 일단 check_list정보를 확정했으면 변경하거나 삭제하지 말아야 한다.

project_detail에 우의 항목들만 추가하면 다른 표를 더 추가하지 않고도 현재 프로그람의 기본적인 기능들을 모두 구현할수 있다.
api에 추가가 필요한 부분은 db_utils의 update_project_detail함수에서 

for k, v in data.items():
        if k in ['company_id', 'work_name', 'check_type', 'checker_id', 'delay', 'create_date', 'self_check_date', 'imp_check_date', 'check_schedule']:
            update_list.append(f'{k} = %s')
            data_list.append(str(v))

두번행에 새로 만들어진 항목들을 추가하여 project_detail/Update Api로 project_detail들을 모두 수정할수 있게 하는것이다.

그리고 점검결과를 보관하는 api는 첨부파일이 있을수 있기때문에 따로 만들어(@ChecklistInfoNs.route('/Register')참고)주어야 한다.
